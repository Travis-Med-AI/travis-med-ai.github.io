(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{yBnX:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return m}));var a=n("wx14"),o=n("zLVn"),l=(n("q1tI"),n("7ljp")),i=n("hhGP"),r=n("mDbL"),s=(n("52AM"),n("qKvR"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Contributing/contributing-models.mdx"}});var c={_frontmatter:s},b=i.a;function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)(b,Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"contributing-models"},"Contributing Models"),Object(l.b)("p",null,"New models can be added to travis med ai by submitting a pull request to our ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Travis-Med-AI/model-registry"}),"models-repository")," in the following format:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"model-title/\n    manifest.json\n")),Object(l.b)("p",null,"At travis med ai, all models are hosted on ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/"}),"dockerhub")," as docker images.\nYour manifest.json file will contain all pertinent information for integrating your model into our system (i.e. location of the docker image, display name, etc.). More information on how to structure a manifest.json file is ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"#manifest-properties"}),"below")),Object(l.b)("h2",{id:"manifest-properties"},"Manifest Properties"),Object(l.b)("p",null,"Your manifest should contain the following information:"),Object(l.b)(r.ParamTable,null),Object(l.b)("h2",{id:"example-manifest"},"Example Manifest"),Object(l.b)("p",null,"The following is an example of a completed manifest:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'// manifest.json\n{\n  "tag": "tclarke104/ich-model:0.1",\n  "displayName": "Intracranial Hemorrhage Detection",\n  "input": "CT",\n  "modality": "CT",\n  "inputType": "DICOM",\n  "output": "Class_Probabilities",\n  "hasImageOutput": false\n}\n')),Object(l.b)("h2",{id:"enums"},"Enums"),Object(l.b)(r.EnumsBlock,null),Object(l.b)("h2",{id:"building-a-model"},"Building a model"),Object(l.b)("p",null,"Building a model is simple! Because docker package all of your dependencies, converting your existing model requires just a few steps."),Object(l.b)("h3",{id:"the-dockerfile"},"The Dockerfile"),Object(l.b)("p",null,"The dockerfile is located at the root of the project and contains the image build commands"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The dockerfile for a model can be organized into 3 sections.")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"The FROM imports")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This section must include the following line"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"FROM tclarke104/ai-model-base:0.1 as model"))),Object(l.b)("ol",{start:2},Object(l.b)("li",{parentName:"ol"},"Your custom build commands")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This section is where you do any COPY or RUN commands that are required for building your project.")),Object(l.b)("ol",{start:3},Object(l.b)("li",{parentName:"ol"},"The AI build commands")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This section should not be edited and contains the following")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Dockerfile"}),"# DONT EDIT THIS SECTION\nRUN pip install redis\nCOPY --from=model /opt/runner /opt\nWORKDIR /opt\nADD . /opt/\nCMD python runner.py\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"This installs redis, copies the required files from the base image, and adds your source gcdoe to the docker image")),Object(l.b)("p",null,"An example Dockerfile is below:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Dockerfile"}),"FROM tclarke104/ai-model-base:0.1 as model\nFROM tensorflow/tensorflow:2.0.0-gpu-py3\n\n# Install dependencies\nRUN pip install pydicom scikit-image medaimodels\n\n# DONT EDIT THIS SECTION\n# add current directory to container\nRUN pip install redis\nCOPY --from=model /opt/runner /opt\nWORKDIR /opt\nADD . /opt/\nCMD python runner.py\n")),Object(l.b)("h3",{id:"mainpy"},"main.py"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"All models must have a main.py file in the root of the project."),Object(l.b)("li",{parentName:"ul"},"Must have a function called ",Object(l.b)("inlineCode",{parentName:"li"},"evaluate_model")," that takes a single parameter of type List","[str]",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The parameter is a list of paths to the locations of the DICOMDIR directories on the filesystem")))),Object(l.b)("p",null,"Example main.py"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'from tensorflow.keras.models import load_model\nfrom medaimodels import ModelOutput\nimport numpy as np\n\ndef evaluate(img):\n    CATEGORIES = ["Abd_Xray", "Frontal_CXR", "Lateral_CXR", "MSK_Xray"]\n    model = load_model(\'{path_to_saved_model}\')\n\n    scores = model.predict(img)\n    output = [ModelOutput(display=CATEGORIES[np.argmax(score)]) for score in scores]\n\n    return output\n\ndef evaluate_model(files):\n    # calls custom preprocess function that loads images and does preprocessing\n    preprocessed = preprocess(files)\n\n    study_type = evaluate(preprocessed)\n\n    return study_type\n')),Object(l.b)("h3",{id:"io-from-containers"},"I/O from containers"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The base docker image ",Object(l.b)("inlineCode",{parentName:"li"},"tclarke104/ai-model-base")," manages running the model and communication with the AI runner"),Object(l.b)("li",{parentName:"ul"},"Inputs:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Inputs to the containers are a list of filepaths to DICOMDIR directories"),Object(l.b)("li",{parentName:"ul"},"The DICOMDIR format consists of a DICOMDIR file at the root and a directory containing the dicoms from a study",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"This was chosen because it is a standardized structure and consistent between multi instance and single instance studies"))))),Object(l.b)("li",{parentName:"ul"},"Outputs:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The output of a container is a list of objects of the class ModelOutput"),Object(l.b)("li",{parentName:"ul"},"ModelOuput can be found in the medaimodels pip package")))))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Contributing/contributing-models.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-contributing-contributing-models-mdx-836993c77fa207136d23.js.map